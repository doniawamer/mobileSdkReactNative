import org.apache.tools.ant.taskdefs.condition.Os

/**
 * Use international variant JavaScriptCore
 * International variant includes ICU i18n library and necessary data allowing to use
 * e.g. Date.toLocaleString and String.localeCompare that give correct results
 * when using with locales other than en-US.
 * Note that this variant is about 6MiB larger per architecture than default.
 */
def useIntlJsc = false

buildscript {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

dependencies {
  api project(':libs:MobileSync')
  api 'com.facebook.react:react-native:0.67.1'
  androidTestImplementation 'androidx.test:runner:1.4.0'
  androidTestImplementation 'androidx.test:rules:1.4.0'
  androidTestImplementation 'androidx.test.ext:junit:1.1.3'

    // JSC from node_modules
    if (useIntlJsc) {
        androidTestImplementation 'org.webkit:android-jsc-intl:+'
    } else {
        androidTestImplementation 'org.webkit:android-jsc:+'
    }

}

android {
    compileSdkVersion 32

    defaultConfig {
        targetSdkVersion 32
        minSdkVersion 24
    }

  buildTypes {
    debug {
      testCoverageEnabled = true
    }
  }

  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src']
      resources.srcDirs = ['src']
      aidl.srcDirs = ['src']
      renderscript.srcDirs = ['src']
      res.srcDirs = ['res']
      assets.srcDirs = ['assets']
    }
    androidTest.setRoot('../test/SalesforceReactTest')
    androidTest {
      java.srcDirs = ['../test/SalesforceReactTest/src']
      resources.srcDirs = ['../test/SalesforceReactTest/src']
      res.srcDirs = ['../test/SalesforceReactTest/res']
    }
  }
    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/DEPENDENCIES', 'META-INF/NOTICE']
        }
    }

    defaultConfig {
    testApplicationId "com.salesforce.androidsdk.salesforcereact.tests"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

    lint {
        abortOnError false
        xmlReport true
    }

}

def assetsFolder = new File('libs/test/SalesforceReactTest/assets')
def reactTestsBundleFile = new File(assetsFolder, 'index.android.bundle')

task buildReactTestBundle(type:Exec) {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    commandLine("cmd", "/c", "node", "node_modules/react-native/local-cli/cli.js", "bundle", "--platform", "android", "--dev", "true",
        "--entry-file", "node_modules/react-native-force/test/alltests.js", "--bundle-output", reactTestsBundleFile.absolutePath,
        "--assets-dest", assetsFolder.absolutePath)
  } else {
    commandLine("/usr/local/bin/node", "node_modules/react-native/local-cli/cli.js", "bundle", "--platform", "android", "--dev", "true",
        "--entry-file", "node_modules/react-native-force/test/alltests.js", "--bundle-output", reactTestsBundleFile.absolutePath,
        "--assets-dest", assetsFolder.absolutePath)
  }
}

task buildReactTestBundleIfNotExists {
  doLast {
    if (!reactTestsBundleFile.exists()) {
      assetsFolder.mkdirs()
      tasks.buildReactTestBundle.execute()
    }
  }
}

afterEvaluate {
    try {

        // Generate react tests bundle first.
        preDebugAndroidTestBuild.dependsOn(buildReactTestBundleIfNotExists)
    } catch(Throwable ignored) {
        println("The preDebugAndroidTestBuild task was not found.")
    }
}

ext {
    PUBLISH_GROUP_ID = 'com.salesforce.mobilesdk'
    PUBLISH_VERSION = '10.1.1'
    PUBLISH_ARTIFACT_ID = 'SalesforceReact'
}

if (rootProject.name == 'SalesforceMobileSDK-Android') {
    apply from: "${rootProject.projectDir}/publish/publish-module.gradle"
}